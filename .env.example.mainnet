#################################
####        USER INFO       #####
#################################

# Deployment Name and Network
DLT=cardano
NETWORK=mainnet
PROJ_NAME="dandolite-${NETWORK}"
# when having concurrent deployments like mainnet and preprod, use this offset to assign a unique number to each one to avoid network port collisions 
PORT_OFFSET=0

#Dandelion Network Information
NODE_NAME="sunflower01"
NODE_TICKER="sun01"
NODE_GROUPS='[]'

# Directory where to store or restore-from docker volume backup files (with last slash. If empty, default is project directory)
#BACKUP_DIR="/media/${USER}/data/backups/${NETWORK}/"
BACKUP_DIR="/home/${USER}/backups/${NETWORK}/"

# User and Password for serving privately your backup files 
NGINX_WWW_BACKUP_USER=backup
NGINX_WWW_BACKUP_PASSWORD=backup

# DuckDNS API Token (empty=disabled)
DUCKDNS_TOKEN=

# Testing
BLOCKFROST_TEST_PROJECT_ID=



#################################
####        ADVANCED        #####
#################################

### GENERAL ###

#NODE_EXTENSIONS="cardano_node,cardano_db_sync,cf_ledger_sync,ogmios,postgrest,koios,cardano_sql,pgadmin,swagger"
NODE_EXTENSIONS=""
NODE_DESCRIPTION="Welcome to '${NODE_NAME}' [${NODE_TICKER}], a Dandelion Lite Node, a ${DLT} ${NETWORK} node with backend APIs and services like ogmios, cardano-graphql, koios, blockfrost, cardano-submit-api, cardano-token-registry, postgrest and unimatrix."

# Koios RPC database schemas
KOIOS_ARTIFACTS_SCHEMA=koios
KOIOS_LITE_SCHEMA=koios_lite

# Dandelion PostGREST schema
DANDELION_POSTGREST_SCHEMA=dandelion_postgrest

# Cardano Token Registry schema
CARDANO_TOKEN_REGISTRY_SCHEMA=cardano_token_registry

# Cardano SQL database schemas, each one is an API extension which will be accessible using PostgreSQL  
CARDANO_SQL_EXTENSIONS="cardano_db_sync,cf_ledger_sync,ogmios,unimatrix,gcfs"
CARDANO_SQL_SCHEMA=cardano_sql
CARDANO_SQL_SCHEMAS="${CARDANO_SQL_SCHEMA},${CARDANO_SQL_EXTENSIONS},${KOIOS_LITE_SCHEMA},${KOIOS_ARTIFACTS_SCHEMA},${DANDELION_POSTGREST_SCHEMA},${CARDANO_TOKEN_REGISTRY_SCHEMA}"

### SERVICES ###

# Cardano Node
CARDANO_NODE_VERSION=10.1.4
CARDANO_NODE_IMAGE="cardanocommunity/cardano-node:${CARDANO_NODE_VERSION}"
#CARDANO_NODE_HOME="/opt/cardano/cnode"
CARDANO_NODE_HOME=""
NODE_EXTENSIONS="{\"name\":\"cardano_node\",\"version\":\"${CARDANO_NODE_VERSION}\",\"image\":\"\"}"

# Ogmios
OGMIOS_VERSION=v6.13.0
OGMIOS_IMAGE="cardanosolutions/ogmios:${OGMIOS_VERSION}"
OGMIOS_HOST="cardano-node-ogmios"
OGMIOS_PORT=${PORT_OFFSET}1337
#NODE_EXTENSIONS="${NODE_EXTENSIONS},{\"name\":\"ogmios\",\"path\":\"ogmios/\",\"version\":\"${CARDANO_OGMIOS_VERSION}\",\"image\":\"${CARDANO_OGMIOS_IMAGE}\"}"
CARDANO_NODE_RELAY_PORT=${PORT_OFFSET}3000


#Cardano Node + Ogmios
CARDANO_NODE_OGMIOS_IMAGE=cardanosolutions/cardano-node-ogmios:${OGMIOS_VERSION:-v6.1.0}_${CARDANO_NODE_VERSION:-8.7.3}-${NETWORK}
NODE_EXTENSIONS="${NODE_EXTENSIONS},{\"name\":\"ogmios\",\"path\":\"ogmios/\",\"version\":\"${OGMIOS_VERSION}\",\"image\":\"${OGMIOS_IMAGE}\"}"
INDEX_LINKS="<li><a href=\"ogmios/\">Ogmios</a></li>"

# Cardano DB Sync
CARDANO_DB_SYNC_VERSION=13.6.0.5
CARDANO_DB_SYNC_IMAGE="ghcr.io/intersectmbo/cardano-db-sync:${CARDANO_DB_SYNC_VERSION}"
#CARDANO_DB_SYNC_ARGS="--bootstrap-tx-out --dont-use-ledger --prune-tx-out"
CARDANO_DB_SYNC_ARGS=" --disable-ledger --prune-tx-out"
CARDANO_DB_SYNC_DISABLE_LEDGER=N
#Warning: Broken snapshot URLS cause dbsync failures on container startup
#CARDANO_DB_SYNC_RESTORE_SNAPSHOT="https://update-cardano-mainnet.iohk.io/cardano-db-sync/13.2/db-sync-snapshot-schema-13.2-block-10294231-x86_64.tgz"
NODE_EXTENSIONS="${NODE_EXTENSIONS},{\"name\":\"cardano_db_sync\",\"version\":\"${CARDANO_DB_SYNC_VERSION}\",\"image\":\"${CARDANO_DB_SYNC_IMAGE}\"}"

# Cardano Token Registry
CARDANO_TOKEN_REGISTRY_VERSION=1.0.2
CARDANO_TOKEN_REGISTRY_IMAGE=cardanofoundation/cf-token-metadata-registry-api
CARDANO_TOKEN_REGISTRY_HOSTNAME=cardano-token-registry
CARDANO_TOKEN_REGISTRY_PORT=${PORT_OFFSET}3729
CARDANO_TOKEN_REGISTRY_GITHUB_ORGANIZATION=cardano-foundation
CARDANO_TOKEN_REGISTRY_GITHUB_PROJECT_NAME=cardano-token-registry
CARDANO_TOKEN_REGISTRY_GITHUB_MAPPINGS_FOLDER=mappings
CARDANO_TOKEN_REGISTRY_SYNC_JOB=true
NODE_EXTENSIONS="${NODE_EXTENSIONS},{\"name\":\"cardano_token_registry\",\"path\":\"cardano-token-registry/\",\"version\":\"${CARDANO_TOKEN_REGISTRY_VERSION}\",\"image\":\"${CARDANO_TOKEN_REGISTRY_IMAGE}\"}"
INDEX_LINKS="${INDEX_LINKS}<li><a href=\"cardano-token-registry/\">Cardano Token Registry</a></li>"

# Cardano GraphQL 
CARDANO_GRAPHQL_VERSION=8.3.3
CARDANO_GRAPHQL_BACKGROUND_IMAGE=cardanofoundation/cardano-graphql-background:${CARDANO_GRAPHQL_VERSION:-8.0.3}-${NETWORK}
CARDANO_GRAPHQL_SERVER_IMAGE=cardanofoundation/cardano-graphql-server:${CARDANO_GRAPHQL_VERSION:-8.0.3}-${NETWORK}
CARDANO_GRAPHQL_HASURA_IMAGE=cardanofoundation/cardano-graphql-hasura:${CARDANO_GRAPHQL_VERSION:-8.0.3}
CARDANO_GRAPHQL_HASURA_PORT=${PORT_OFFSET}8080
CARDANO_GRAPHQL_SERVER_PORT=${PORT_OFFSET}3100
CARDANO_GRAPHQL_BACKGROUND_LOGGER_MIN_SEVERITY=debug
#On mainnet this official public service can be used but is a worldwide bottleneck: https://tokens.cardano.org
CARDANO_GRAPHQL_BACKGROUND_METADATA_SERVER_URI=http://${CARDANO_TOKEN_REGISTRY_HOSTNAME}:8080

CARDANO_GRAPHQL_BACKGROUND_CHAIN_FOLLOWER_START_SLOT=23068800
CARDANO_GRAPHQL_BACKGROUND_CHAIN_FOLLOWER_START_ID="a650a3f398ba4a9427ec8c293e9f7156d81fd2f7ca849014d8d2c1156c359b3a"

NODE_EXTENSIONS="${NODE_EXTENSIONS},{\"name\":\"cardano_graphql\",\"path\":\"cardano-graphql/\",\"version\":\"${CARDANO_GRAPHQL_VERSION}\",\"image\":\"${CARDANO_GRAPHQL_SERVER_IMAGE}\"}"
INDEX_LINKS="${INDEX_LINKS}<li><a href=\"cardano-graphql\">Cardano GraphQL</a></li>"


# Database-less Cardano Token Registry
DBLESS_CARDANO_TOKEN_REGISTRY_VERSION=1.1
DBLESS_CARDANO_TOKEN_REGISTRY_IMAGE=""
DBLESS_CARDANO_TOKEN_REGISTRY_PORT=${PORT_OFFSET}3042
#NODE_EXTENSIONS="${NODE_EXTENSIONS},{\"name\":\"dbless_cardano_token_registry\",\"path\":\"token-registry/\",\"version\":\"${DBLESS_CARDANO_TOKEN_REGISTRY_VERSION}\",\"image\":\"${DBLESS_CARDANO_TOKEN_REGISTRY_IMAGE}\"}"
#INDEX_LINKS="${INDEX_LINKS}<li><a href=\"token-registry/\">Dandelion Token Registry</a></li>"


# Postgres common data for Koios,Dandelion-PostGREST and cardano-sql
#WARNING: cardano-graphql-hasura needs it as 'postgres'
POSTGRES_HOST=postgres
POSTGRES_PASSWORD=dandelion1234
POSTGRES_USER=dandelion_user
POSTGRES_DB=dandelion_lite  
POSTGRES_PORT=${PORT_OFFSET}5432
POSTGRES_ARGS="-c max_connections=200 -c wal_level=minimal -c max_wal_senders=0 -c synchronous_commit=off -c maintenance_work_mem=1024MB  -c  max_parallel_maintenance_workers=4"

# Koios Artifacts/Koios Lite PostGREST
POSTGREST_HOST=postgrest
POSTGREST_DB_ANON_ROLE=web_anon
#comma separated, first one is default schema, others are accessed by explicitly using the schema name in queries
POSTGREST_DB_SCHEMAS="${KOIOS_ARTIFACTS_SCHEMA},${KOIOS_LITE_SCHEMA}"
POSTGREST_DB_EXTRA_SEARCH_PATH="${POSTGREST_DB_SCHEMAS},public"
POSTGREST_PORT=${PORT_OFFSET}8050
KOIOS_VERSION=1.3.2
KOIOS_IMAGE=""
NODE_EXTENSIONS="${NODE_EXTENSIONS},{\"name\":\"${KOIOS_ARTIFACTS_SCHEMA}\",\"path\":\"koios/\",\"version\":\"${KOIOS_VERSION}\",\"image\":\"${KOIOS_IMAGE}\"}"
INDEX_LINKS="${INDEX_LINKS}<li><a href=\"koios/\">Koios (koios-artifacts)</a></li>"

# Dandelion PostGREST
DANDELION_POSTGREST_HOST=dandelion-postgrest
DANDELION_POSTGREST_DB_ANON_ROLE=${POSTGREST_DB_ANON_ROLE}
#comma separated, first one is default schema, others are accessed by explicitly using the schema name in queries
DANDELION_POSTGREST_DB_SCHEMAS="${DANDELION_POSTGREST_SCHEMA}"
DANDELION_POSTGREST_DB_EXTRA_SEARCH_PATH=${DANDELION_POSTGREST_SCHEMA}
DANDELION_POSTGREST_PORT=${PORT_OFFSET}8060
DANDELION_POSTGREST_VERSION="f814f568b389f13e75230f1d3175210abfddb7e9"
NODE_EXTENSIONS="${NODE_EXTENSIONS},{\"name\":\"${DANDELION_POSTGREST_SCHEMA}\",\"path\":\"postgrest/\",\"version\":\"${DANDELION_POSTGREST_VERSION}\",\"image\":\"\"}"
INDEX_LINKS="${INDEX_LINKS}<li><a href=\"postgrest/\">Dandelion PostGREST</a></li>"

# Cardano SQL PostGREST
CARDANO_SQL_POSTGREST_HOST=cardano-sql-postgrest
CARDANO_SQL_POSTGREST_DB_ANON_ROLE=${POSTGREST_DB_ANON_ROLE}
#comma separated, first one is default schema, others are accessed by explicitly using the schema name in queries
CARDANO_SQL_POSTGREST_DB_SCHEMAS="${CARDANO_SQL_SCHEMAS}"
CARDANO_SQL_POSTGREST_DB_EXTRA_SEARCH_PATH=${CARDANO_SQL_SCHEMAS}
CARDANO_SQL_POSTGREST_PORT=${PORT_OFFSET}8070
#optional NodeJS express server for extended features
CARDANO_SQL_COMPANION_PORT=${PORT_OFFSET}4000
CARDANO_SQL_VERSION=1.0
NODE_EXTENSIONS="${NODE_EXTENSIONS},{\"name\":\"${CARDANO_SQL_SCHEMA}\",\"path\":\"cardano-sql/\",\"version\":\"${CARDANO_SQL_VERSION}\",\"image\":\"\",\"plugins\":\"${CARDANO_SQL_SCHEMAS}\"}"
#INDEX_LINKS="${INDEX_LINKS}<li><a href=\"cardano-sql/\">Cardano SQL</a></li>"

# Cardano Submit-API
CARDANO_SUBMIT_API_VERSION=10.4.1
CARDANO_SUBMIT_API_IMAGE=ghcr.io/intersectmbo/cardano-submit-api:${CARDANO_SUBMIT_API_VERSION:-10.4.1}
CARDANO_SUBMIT_API_PORT=${PORT_OFFSET}8090
NODE_EXTENSIONS="${NODE_EXTENSIONS},{\"name\":\"cardano_submit_api\",\"path\":\"cardano-submit-api/\",\"version\":\"${CARDANO_SUBMIT_API_VERSION}\",\"image\":\"${CARDANO_SUBMIT_API_IMAGE}\"}"
INDEX_LINKS="${INDEX_LINKS}<li><a href=\"cardano-submit-api\">Cardano Submit API</a></li>"

# Blockfrost
BLOCKFROST_VERSION=4.1.0
BLOCKFROST_IMAGE=blockfrost/backend-ryo:v${BLOCKFROST_VERSION:-4.1.0}
BLOCKFROST_PORT=${PORT_OFFSET}8055
BLOCKFROST_PATH=blockfrost/api/v0
# Server Configuration
BLOCKFROST_NODE_ENV=production-${NETWORK}
BLOCKFROST_CONFIG_NETWORK=${NETWORK}
BLOCKFROST_CONFIG_GENESIS_DATA_FOLDER="/app/config/genesis/${NETWORK}"
BLOCKFROST_CONFIG_SERVER_LISTEN_ADDRESS=0.0.0.0
BLOCKFROST_CONFIG_SERVER_PORT=8055
BLOCKFROST_CONFIG_SERVER_DEBUG=true
BLOCKFROST_CONFIG_SERVER_PROMETHEUS_METRICS=true
# Database Sync Configuration
BLOCKFROST_CONFIG_DBSYNC_HOST=${POSTGRES_HOST}
BLOCKFROST_CONFIG_DBSYNC_PORT=5432
BLOCKFROST_CONFIG_DBSYNC_DATABASE=${POSTGRES_DB}
BLOCKFROST_CONFIG_DBSYNC_USER=${POSTGRES_USER}
BLOCKFROST_CONFIG_DBSYNC_PASSWORD=${POSTGRES_PASSWORD}
BLOCKFROST_CONFIG_DBSYNC_MAX_CONN=10
BLOCKFROST_CONFIG_DBSYNC_SSL=false
# Token Registry
BLOCKFROST_CONFIG_TOKEN_REGISTRY_ENABLED=true
BLOCKFROST_CONFIG_TOKEN_REGISTRY_URL=http://${CARDANO_TOKEN_REGISTRY_HOSTNAME}:8080
# Mithril
BLOCKFROST_MITHRIL_ENABLED=false
BLOCKFROST_MITHRIL_AGGREGATOR=https://aggregator.release-${NETWORK}.api.mithril.network/aggregator
# Testing
BLOCKFROST_TEST_PROJECT_ID=$BLOCKFROST_TEST_PROJECT_ID
# Manifest entry
NODE_EXTENSIONS="${NODE_EXTENSIONS},{\"name\":\"blockfrost\",\"path\":\"${BLOCKFROST_PATH}/\",\"version\":\"${BLOCKFROST_VERSION}\",\"image\":\"${BLOCKFROST_IMAGE}\"}"
INDEX_LINKS="${INDEX_LINKS}<li><a href=\"${BLOCKFROST_PATH}/\">Blockfrost</a></li>"

# Unimatrix
UNIMATRIX_VERSION=1.0.3
UNIMATRIX_PORT=${PORT_OFFSET}8764
NODE_EXTENSIONS="${NODE_EXTENSIONS},{\"name\":\"unimatrix\",\"path\":\"unimatrix/\",\"version\":\"${UNIMATRIX_VERSION}\",\"image\":\"\"}"
#Allow bridging with other nodes to ease multisig operations: 
#NODE_EXTENSIONS="${NODE_EXTENSIONS},{\"name\":\"unimatrix\",\"path\":\"https://unimatrix01.gamechanger.finance/gun\",\"version\":\"${UNIMATRIX_VERSION}\",\"image\":\"\"}"
#NODE_EXTENSIONS="${NODE_EXTENSIONS},{\"name\":\"unimatrix\",\"path\":\"https://unimatrix02.gamechanger.finance/gun\",\"version\":\"${UNIMATRIX_VERSION}\",\"image\":\"\"}"
INDEX_LINKS="${INDEX_LINKS}<li><a href=\"unimatrix/\">Unimatrix</a></li>"

# PGAdmin
PGADMIN_PORT=${PORT_OFFSET}5051

# Swagger
SWAGGER_PORT=${PORT_OFFSET}8180

# Haproxy
HAPROXY_HOST=haproxy
#HAPROXY_BINDED_HOST=192.168.0.5:
HAPROXY_BINDED_HOST=""
HAPROXY_PORT=308${PORT_OFFSET}
HAPROXY_CFG="./configs/haproxy/haproxy.cfg"

# NginX
NGINX_VERSION=1.28.0
NGINX_IMAGE="nginx:${NGINX_VERSION:-1.28.0}-alpine"
NGINX_PORT=${PORT_OFFSET}8800
NGINX_WWW_BACKUP_DIR="$BACKUP_DIR"
NGINX_WWW_BACKUP_PATH="backups/"
NGINX_WWW_BACKUP_USER=$NGINX_WWW_BACKUP_USER
NGINX_WWW_BACKUP_PASSWORD=$NGINX_WWW_BACKUP_PASSWORD
NODE_EXTENSIONS="${NODE_EXTENSIONS},{\"name\":\"backups\",\"path\":\"$NGINX_WWW_BACKUP_PATH\",\"version\":\"${NGINX_VERSION}\",\"image\":\"${NGINX_IMAGE}\"}"
INDEX_LINKS="${INDEX_LINKS}<li><a href=\"$NGINX_WWW_BACKUP_PATH\">Backups</a></li>"

# Portainer
PORTAINER_PORT=${PORT_OFFSET}9000

# Cron Scheduler
CRON_DO_NOT_INITIALIZE=false

# DuckDNS Dynamic DNS 
# Go to https://www.duckdns.org/, 
# create an account, 
# add the subdomain on https://www.duckdns.org/domains, 
# place the subdomain on DUCKDNS_DOMAINS and the API token in DUCKDNS_TOKEN or leave empty to disable auto update

DUCKDNS_DOMAINS="${NODE_TICKER}-dandelion-node"
DUCKDNS_TOKEN=$DUCKDNS_TOKEN
#DUCKDNS_IP=

# Manifest
INDEX_LINKS="${INDEX_LINKS}<li><a href=\"manifest/\">Manifest</a></li>"

# Haproxy Stats
INDEX_LINKS="${INDEX_LINKS}<li><a href=\"stats/\">Statistics</a></li>"


